Table: UserVisits

+-------------+------+
| Column Name | Type |
+-------------+------+
| user_id     | int  |
| visit_date  | date |
+-------------+------+
This table does not have a primary key, it might contain duplicate rows.
This table contains logs of the dates that users visited a certain retailer.
 

Assume today's date is '2021-1-1'.

Write a solution that will, for each user_id, find out the largest window of days between each visit and the one right after it (or today if you are considering the last visit).

Return the result table ordered by user_id.

The query result format is in the following example.

 

Example 1:

Input: 
UserVisits table:
+---------+------------+
| user_id | visit_date |
+---------+------------+
| 1       | 2020-11-28 |
| 1       | 2020-10-20 |
| 1       | 2020-12-3  |
| 2       | 2020-10-5  |
| 2       | 2020-12-9  |
| 3       | 2020-11-11 |
+---------+------------+
Output: 
+---------+---------------+
| user_id | biggest_window|
+---------+---------------+
| 1       | 39            |
| 2       | 65            |
| 3       | 51            |
+---------+---------------+
Explanation: 
For the first user, the windows in question are between dates:
    - 2020-10-20 and 2020-11-28 with a total of 39 days. 
    - 2020-11-28 and 2020-12-3 with a total of 5 days. 
    - 2020-12-3 and 2021-1-1 with a total of 29 days.
Making the biggest window the one with 39 days.
For the second user, the windows in question are between dates:
    - 2020-10-5 and 2020-12-9 with a total of 65 days.
    - 2020-12-9 and 2021-1-1 with a total of 23 days.
Making the biggest window the one with 65 days.
For the third user, the only window in question is between dates 2020-11-11 and 2021-1-1 with a total of 51 days.

SOLUTION: 

with final as(SELECT 
user_id,DATEDIFF(DAY,visit_date,lead(visit_date,1,'2021-1-1') OVER(partition by user_id order by visit_date))
as lead_date
FROM UserVisits
)
SELECT user_id,MAX(lead_date) as biggest_window
From Final
GROUP BY user_id

Intution : 
1. When I looked at the table the dates are not in proper order I mean it is order by asc or desc if I want to find the diff first of all I should know the next immediate date other I should go for default date
this condition can be satisfied by using lead function which has option to choose which value ahead 1,2 or 3 but for our case 1 is good enough. Basically lead has over clause and there we can use partition by user_id.
2. Once I got the next immediate date in ascending order and I can make use of DATE_DIFF using DAY as return value after finding the difference between today's date and next immediate date. 
and that's it just go with GROUP BY user_id becoz there might be a chance of having duplicates according to the problem description. 

